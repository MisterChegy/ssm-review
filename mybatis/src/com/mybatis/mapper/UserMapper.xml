<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.mapper.UserMapper">
  <resultMap type="com.mybatis.model.User" id="user">
		<id property="id" column="id" />
		<result property="userName" column="user_name" />
		<result property="userPassword" column="user_password"/>
  </resultMap>
  
  <!-- 根据id查询一个用户信息 -->
  <select id="selectUserById" parameterType="Integer"
  	resultMap="user">
  	select * from user where id = #{id}
  </select>
  
  <!-- 查询所有用户信息 -->	
  <select id="selectAllUser" resultMap="user">
  	select * from user
  </select>
  
  <!-- 添加一个用户，#{userName}为com.mybatis.model.User的属性值 -->
  <insert id="addUser" parameterType="com.mybatis.model.User">
  	insert into user(user_name,user_password) values(#{userName},#{userPassword})
  </insert>	
  
  <!-- 修改一个用户 -->
  <update id="updateUser" parameterType="com.mybatis.model.User">
  	update user set user_name = #{userName},user_password = #{userPassword}
  		where id = #{id}
  </update>
   
  <!-- 删除一个用户 --> 
  <delete id="deleteUser" parameterType="Integer">
  	delete from user where id = #{id}
  </delete>
  
  <!-- 模糊查询 -->
  <!-- 查询有ch子串的，男性用户信息。使用Map接口传递多个参数 -->
  <select id="selectSomeUser" resultMap="user" parameterType="map">
  	select * from user
  	where user_name like concat('%',#{userName},'%')
  	and user_password = #{userPassword}
  </select>
  
  <!-- 查询有ch子串的，男性用户信息。使用Java Bean接口传递多个参数 -->
  <select id="selectManyUser" resultMap="user" parameterType="com.mybatis.model.User">
  	select * from user
  	where user_name like concat('%',#{userName},'%')
  	and user_password = #{userPassword}
  </select>
  
  <!-- 添加一个用户，返回主键，要求主键是自动递增的设置 -->
  <insert id="addUserReturnId" parameterType="com.mybatis.model.User"
  keyProperty="id" useGeneratedKeys="true">
  	insert into user(user_name,user_password) values(#{userName},#{userPassword})
  </insert>
  
    <!-- 一对多  根据id查询用户及其关联的订单信息：级联查询的第一种方法 -->
	<resultMap type="com.mybatis.model.User" id="userAndOrders1">
		<id property="id" column="id"/>
		<result property="userName" column="user_name"/>
		<result property="userPassword" column="user_password"/>
		<!-- 一对多级联查询，ofType表示集合中的元素类型，将id传递给selectOrdersById -->
		<collection property="ordersList" column="id" ofType="com.mybatis.model.Orders" select="com.mybatis.mapper.OrdersMapper.selectOrdersById"/>
		
	</resultMap>
	<select id="selectUserOrdersById1" parameterType="Integer" resultMap="userAndOrders1">
		select * from user where id=#{id}
	</select>
	
  	<!-- 一对多  根据id查询用户及其关联的订单信息:级联查询的第二种方法（嵌套结果） -->
  	<resultMap type="com.mybatis.model.User" id="userAndOrders2">
  		<id property="id" column="id"/>
  		<result property="userName" column="user_name"/>
  		<result property="userPassword" column="user_password"/>
  		<!-- 一对多级联查询，ofType表示集合中的元素类型 -->
  		<collection property="ordersList" ofType="com.mybatis.model.Orders">
  			<id property="id" column="id"/>
  			<result property="ordersn" column="ordersn"/>
  		</collection>
  	</resultMap>
  	<select id="selectUserOrdersById2" parameterType="Integer" resultMap="userAndOrders2">
  		select u.*,o.id,o.ordersn from user u,orders o where u.id = o.user_id
  		and u.id=#{id}
  	</select>
  	
  	<!-- 一对多，根据id查询用户及其关联的订单信息：连接查询（使用POJO存储信息） -->
  	<select id="selectUserOrdersById3" parameterType="Integer"
  		resultType="com.mybatis.model.SelectUserOrdersById">
  		select u.*,o.ordersn from user u,orders o where 
  		u.id = o.user_id
  		and u.id = #{id}
  	</select>
  	
  	<!-- 使用if元素根据条件动态查询用户信息 -->
  	<select id="selectUserByIf" resultMap="user" parameterType="com.mybatis.model.User">
  		select * from user where 1=1
  		<if test="userName!=null and userName!=''">
  			and user_name like concat('%',#{userName},'%')
  		</if>
  		<if test="userPassword!=null and userPassword!=''">
  			and user_password = #{userPassword}
  		</if>
  		
  	</select>
  	
  	<!-- 使用trim元素根据条件动态查询用户信息 -->
  	<select id="selectUserByTrim" resultMap="user" parameterType="com.mybatis.model.User">
  		
  		select * from user
  		<trim prefix="where" prefixOverrides="and | or">
  			<if test="userName!=null and userName!=''">
  				and user_name like concat('%',#{userName},'%')
  			</if>
  			<if test="userPassword!=null and userPassword!=''">
  				and user_password=#{userPassword}
  			</if>
  		</trim>
  	</select>
  	
  	<!-- 使用where元素根据条件动态查询用户信息 -->
  	<select id="selectUserByWhere" resultMap="user" parameterType="com.mybatis.model.User">
  		select * from user
  		<where>
  			<if test="userName!=null and userName!=''">
  				and user_name like concat('%',#{userName},'%')
  			</if>
  			<if test="userPassword!=null and userPassword!=''">
  				and user_password=#{userPassword}
  			</if>
  		</where>
  	</select>
  	
  	<!-- 使用set元素动态修改一个用户 -->
  	<update id="updateUserBySet" parameterType="com.mybatis.model.User">
  		update user
  		<set>
  			<if test="userName!=null">user_name=#{userName}</if>
  			<if test="userPassword!=null">user_password=#{userPassword}</if>
  			
  		</set>
  		where id=#{id}
  	</update>
  	
  	<!-- 使用foreach元素查询用户信息 -->
  	<select id="selectUserByForeach" resultMap="user" parameterType="List">
  		select * from user where id in 
  		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
  			#{item}
  		</foreach>
  	</select>
  	
  	<!-- 使用bind元素进行模糊查询 -->
  	<select id="selectUserByBind" resultMap="user" parameterType="com.mybatis.model.User">
  		<!-- bind中的user_name是com.mybatis.model.User的属性名 -->
  		<bind name="paran_name" value="'%' + userName +'%'"/>
  		select * from user where user_name like #{paran_name}
  	</select>
  	
  	<!-- 使用choose,when,otherwise元素根据条件动态查询用户信息 -->
  	<select id="selectUserByChoose" resultMap="user" parameterType="com.mybatis.model.User">
  		select * from user where 1=1
  		<choose>
  			<when test="userName!=null and userName!=''">
  				and user_name like concat('%',#{userName},'%')
  			</when>
  			<when test="userPassword!=null and userPassword!=''">
  				and user_password = #{userPassword}
  			</when>
  			<otherwise>
  				and id > 10
  			</otherwise>
  		</choose>
  	</select>
  	
</mapper>